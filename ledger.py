class CurrentState(object):
    def __init__(self, amount):
        """
        a smart contract state
        """
        self.amount = amount
    
    def update(amount, updateFn)
        self.amount = updateFn(self.amount, amount)

class Ledger(object):
    def __init__(self):
        """
        The Ledger is a datatype that maps addresses (Type: Address) to balances or state (Type: CurrentState).
        Modifications to Ledger can be made via transactions, 
        and more specifically by accepting blocks of transactions that are generated by miners, 
        using a simple consensus algorithm.
        """
        self.addresses = {}

    def update(self, block):
        if isinstance(block, Block):
            # apply the block to the ledger state
            for tx in block.transactions:
                # validate transaction
                if isinstance(tx, Transaction) and tx.validate_transaction():
                    self.addresses[tx.header.recipient] = CurrentState(tx.header.recipient).update(tx.header.amount, lambda a,b: a+b)
                    self.addresses[tx.header.senderKey] = CurrentState(tx.header.senderKey).update(tx.header.amount, lambda a,b: a-b)
                else:
                    # log errors
                    print "Following tx is not valid: {}".format(tx)
        else:
            # log errors
            print "Block is not in valid structure"
